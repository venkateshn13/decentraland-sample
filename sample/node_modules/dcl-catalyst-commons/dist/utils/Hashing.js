"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Hashing = void 0;
const hashing = __importStar(require("@dcl/hashing"));
var Hashing;
(function (Hashing) {
    /**
     * Given a set of files, return a map with their hash
     * @deprecated use calculateIPFSHashes instead. This function only exists for compatibility reasons
     */
    async function calculateHashes(files) {
        const entries = Array.from(files).map(async (file) => ({
            hash: await calculateBufferHash(file),
            file
        }));
        return Promise.all(entries);
    }
    Hashing.calculateHashes = calculateHashes;
    /**
     * Return the given buffer's hash
     * @deprecated use calculateIPFSHash instead. This function only exists for compatibility reasons
     */
    async function calculateBufferHash(buffer) {
        return hashing.hashV0(buffer);
    }
    Hashing.calculateBufferHash = calculateBufferHash;
    /**
     * @deprecated use `import {hashV1} from '@dcl/hashing'` instead
     */
    async function calculateIPFSHash(buffer) {
        return hashing.hashV1(buffer);
    }
    Hashing.calculateIPFSHash = calculateIPFSHash;
    async function calculateIPFSHashes(files) {
        const entries = Array.from(files).map(async (file) => ({
            hash: await hashing.hashV1(file),
            file
        }));
        return Promise.all(entries);
    }
    Hashing.calculateIPFSHashes = calculateIPFSHashes;
    /**
     * Calculates the content hash of multiple files to be used consistently by the builder
     * and other content-based applications when hashes need to be stored on-chain.
     *
     * Returns the CIDv1 of the data prepared to sign
     *
     * @deprecated use `import {calculateMultipleHashesADR32} from '@dcl/hashing'` instead
     */
    Hashing.calculateMultipleHashesADR32 = hashing.calculateMultipleHashesADR32;
    /**
     * Calculates the content hash of multiple files to be used consistently by the builder
     * and other content-based applications when hashes need to be stored on-chain.
     * @deprecated this is maintained only for compatibility reasons with calculateBufferHash (Qm prefix)
     */
    Hashing.calculateMultipleHashesADR32LegacyQmHash = hashing.calculateMultipleHashesADR32LegacyQmHash;
})(Hashing = exports.Hashing || (exports.Hashing = {}));
//# sourceMappingURL=Hashing.js.map