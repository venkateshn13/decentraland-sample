"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.main = exports.help = void 0;
const path_1 = __importDefault(require("path"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const arg_1 = __importDefault(require("arg"));
const chalk_1 = __importDefault(require("chalk"));
const spinner = __importStar(require("../utils/spinner"));
const getProjectFilePaths_1 = __importDefault(require("../utils/getProjectFilePaths"));
const getDummyMappings_1 = __importDefault(require("../utils/getDummyMappings"));
const buildProject_1 = __importDefault(require("../utils/buildProject"));
const logging_1 = require("../utils/logging");
const lintSceneFile_1 = require("../sceneJson/lintSceneFile");
const sceneJson_1 = require("../sceneJson");
const moduleHelpers_1 = require("../utils/moduleHelpers");
const Workspace_1 = require("../lib/Workspace");
const assert_1 = require("assert");
const help = () => `
  Usage: ${chalk_1.default.bold('dcl export [options]')}

    ${chalk_1.default.dim('Options:')}

      -h, --help                Displays complete help
      -o, --out                 Output directory for build (defaults to "export")
      --skip-version-checks     Skip the ECS and CLI version checks, avoid the warning message and launch anyway

    ${chalk_1.default.dim('Example:')}

    - Export your scene into static files:

      ${chalk_1.default.green('$ dcl export')}
`;
exports.help = help;
async function main() {
    const args = (0, arg_1.default)({
        '--help': Boolean,
        '-h': '--help',
        '--out': String,
        '-o': '--out',
        '--skip-version-checks': Boolean
    });
    console.warn('`dcl export` will be deprecated in ECS 7. Preview mode scene is getting a complex funcitonality to be served statically. Please try to use a the docker file or just run `dcl start` instead.');
    const workingDir = process.cwd();
    const exportDir = path_1.default.resolve(workingDir, args['--out'] || 'export');
    const skipVersionCheck = args['--skip-version-checks'];
    (0, logging_1.debug)(`Using export directory: ${exportDir}`);
    const workspace = (0, Workspace_1.createWorkspace)({ workingDir });
    if (!workspace.isSingleProject()) {
        (0, assert_1.fail)(`Can not export a workspace.`);
    }
    spinner.create('Checking existance of build');
    await (0, lintSceneFile_1.lintSceneFile)(workingDir);
    const sceneJson = await (0, sceneJson_1.getSceneFile)(workingDir);
    const mainPath = path_1.default.resolve(workingDir, sceneJson.main);
    if (!(await fs_extra_1.default.pathExists(mainPath))) {
        spinner.succeed((0, logging_1.warning)('No build found'));
        try {
            await (0, buildProject_1.default)(workingDir);
        }
        catch (error) {
            spinner.fail('Could not build the project');
            throw new Error(error);
        }
    }
    else {
        spinner.succeed('Build found');
    }
    if (!skipVersionCheck) {
        await (0, moduleHelpers_1.checkECSVersions)(workingDir);
    }
    spinner.create('Exporting project');
    if (await fs_extra_1.default.pathExists(exportDir)) {
        await fs_extra_1.default.remove(exportDir);
    }
    const ignoreFileContent = await fs_extra_1.default.readFile(path_1.default.resolve(workingDir, '.dclignore'), 'utf-8');
    const filePaths = await (0, getProjectFilePaths_1.default)(workingDir, ignoreFileContent);
    const promises = filePaths.map((f) => fs_extra_1.default.copy(path_1.default.resolve(workingDir, f), path_1.default.resolve(exportDir, f)));
    await Promise.all(promises);
    const mappings = (0, getDummyMappings_1.default)(filePaths);
    const dclEcsPath = path_1.default.resolve(workingDir, 'node_modules', 'decentraland-ecs');
    const exportSetupPath = path_1.default.resolve(dclEcsPath, 'src', 'setupExport.js');
    let exportDependencies = defaultExport;
    if (fs_extra_1.default.existsSync(exportSetupPath)) {
        try {
            exportDependencies = require(exportSetupPath);
        }
        catch (err) {
            console.log(`${exportSetupPath} found but it couldn't be loaded properly`);
        }
    }
    await exportDependencies({
        workDir: workingDir,
        exportDir,
        mappings,
        sceneJson
    });
    spinner.succeed('Export successful.');
    return 0;
}
exports.main = main;
async function defaultExport({ workDir, exportDir, mappings, sceneJson }) {
    const artifactPath = path_1.default.resolve(workDir, 'node_modules', 'decentraland-ecs', 'artifacts');
    // Change HTML title name
    const content = await fs_extra_1.default.readFile(path_1.default.resolve(artifactPath, 'export.html'), 'utf-8');
    const finalContent = content.replace('{{ scene.display.title }}', sceneJson.display.title);
    try {
        // decentraland-ecs <= 6.6.4
        await fs_extra_1.default.copy(path_1.default.resolve(artifactPath, 'unity'), path_1.default.resolve(exportDir, 'unity'));
    }
    catch (_a) {
        // decentraland-ecs > 6.6.4
        await fs_extra_1.default.copy(path_1.default.resolve(artifactPath, 'unity-renderer'), path_1.default.resolve(exportDir, 'unity-renderer'));
    }
    await Promise.all([
        fs_extra_1.default.writeFile(path_1.default.resolve(exportDir, 'index.html'), finalContent, 'utf-8'),
        fs_extra_1.default.writeFile(path_1.default.resolve(exportDir, 'mappings'), JSON.stringify(mappings), 'utf-8'),
        fs_extra_1.default.copy(path_1.default.resolve(artifactPath, 'preview.js'), path_1.default.resolve(exportDir, 'preview.js')),
        fs_extra_1.default.copy(path_1.default.resolve(artifactPath, 'default-profile'), path_1.default.resolve(exportDir, 'default-profile')),
        fs_extra_1.default.copy(path_1.default.resolve(artifactPath, 'images/decentraland-connect'), path_1.default.resolve(exportDir, 'images/decentraland-connect')),
        fs_extra_1.default.copy(path_1.default.resolve(artifactPath, 'images/progress-logo.png'), path_1.default.resolve(exportDir, 'images/progress-logo.png')),
        fs_extra_1.default.copy(path_1.default.resolve(artifactPath, 'images/teleport.gif'), path_1.default.resolve(exportDir, 'images/teleport.gif'))
    ]);
}
//# sourceMappingURL=export.js.map