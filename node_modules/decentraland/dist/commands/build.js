"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.main = exports.help = void 0;
const arg_1 = __importDefault(require("arg"));
const chalk_1 = __importDefault(require("chalk"));
const moduleHelpers_1 = require("../utils/moduleHelpers");
const isTypescriptProject_1 = require("../project/isTypescriptProject");
const Workspace_1 = require("../lib/Workspace");
const assert_1 = require("assert");
const help = () => `
  Usage: ${chalk_1.default.bold('dcl build [options]')}

    ${chalk_1.default.dim('Options:')}

      -h, --help                Displays complete help
      -w, --watch               Watch for file changes and build on change
      -p, --production          Build without sourcemaps
      --skip-version-checks     Skip the ECS and CLI version checks, avoid the warning message and launch anyway

    ${chalk_1.default.dim('Example:')}

    - Build your scene:

    ${chalk_1.default.green('$ dcl build')}
`;
exports.help = help;
async function main() {
    const args = (0, arg_1.default)({
        '--help': Boolean,
        '-h': '--help',
        '--watch': String,
        '-w': '--watch',
        '--skip-version-checks': Boolean,
        '--production': Boolean,
        '-p': '--production'
    });
    const workingDir = process.cwd();
    const skipVersionCheck = args['--skip-version-checks'];
    const workspace = (0, Workspace_1.createWorkspace)({ workingDir });
    if (!workspace.isSingleProject()) {
        (0, assert_1.fail)(`Can not build a workspace. It isn't supported yet.`);
    }
    if (!skipVersionCheck) {
        await (0, moduleHelpers_1.checkECSVersions)(workingDir);
    }
    if (await (0, isTypescriptProject_1.isTypescriptProject)(workingDir)) {
        await (0, moduleHelpers_1.buildTypescript)({
            workingDir: workingDir,
            watch: !!args['--watch'],
            production: !!args['--production']
        });
    }
    return 0;
}
exports.main = main;
//# sourceMappingURL=build.js.map